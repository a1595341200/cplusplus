# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from data_parse/SensorFovData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class SensorFovData(genpy.Message):
  _md5sum = "88971566923de10830fbfe5ef523b0e0"
  _type = "data_parse/SensorFovData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """################################################################################
#
# Sensor Fov Data
#
# Description:
#   Interface for describing the fov of a sensor, normally we use circle sector
#   to decribe the field of view of sensor data
#
#
#
################################################################################

# device id
uint8 device_id

# [m] the position based on the ego_rear_axis
geometry_msgs/Vector3 position

# [rad] the opening angle of the sensor view
float32 opening_angle

# [rad] the yaw angle of the sensor based on the x axis of ego_rear_axis
float32 yaw_angle

# [m] minimum range of sensor detection in meter
# normally the close blind spot distance of this sensor
float32 min_range

# [m] max range of sensor detection in meter
float32 max_range


================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['device_id','position','opening_angle','yaw_angle','min_range','max_range']
  _slot_types = ['uint8','geometry_msgs/Vector3','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       device_id,position,opening_angle,yaw_angle,min_range,max_range

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SensorFovData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.device_id is None:
        self.device_id = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Vector3()
      if self.opening_angle is None:
        self.opening_angle = 0.
      if self.yaw_angle is None:
        self.yaw_angle = 0.
      if self.min_range is None:
        self.min_range = 0.
      if self.max_range is None:
        self.max_range = 0.
    else:
      self.device_id = 0
      self.position = geometry_msgs.msg.Vector3()
      self.opening_angle = 0.
      self.yaw_angle = 0.
      self.min_range = 0.
      self.max_range = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3d4f().pack(_x.device_id, _x.position.x, _x.position.y, _x.position.z, _x.opening_angle, _x.yaw_angle, _x.min_range, _x.max_range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.device_id, _x.position.x, _x.position.y, _x.position.z, _x.opening_angle, _x.yaw_angle, _x.min_range, _x.max_range,) = _get_struct_B3d4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3d4f().pack(_x.device_id, _x.position.x, _x.position.y, _x.position.z, _x.opening_angle, _x.yaw_angle, _x.min_range, _x.max_range))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 41
      (_x.device_id, _x.position.x, _x.position.y, _x.position.z, _x.opening_angle, _x.yaw_angle, _x.min_range, _x.max_range,) = _get_struct_B3d4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3d4f = None
def _get_struct_B3d4f():
    global _struct_B3d4f
    if _struct_B3d4f is None:
        _struct_B3d4f = struct.Struct("<B3d4f")
    return _struct_B3d4f
