# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from data_parse/AdjacentLaneFrame.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import data_parse.msg
import std_msgs.msg

class AdjacentLaneFrame(genpy.Message):
  _md5sum = "bdfb3c3ee954044143731d5348c7d930"
  _type = "data_parse/AdjacentLaneFrame"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

AdjacentLane[] adject_lanes
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: data_parse/AdjacentLane
std_msgs/Header header

uint8 Lanes_Adjacent_Count
# enum
uint8 Adjacent_Type
uint8 UNDECIDED = 0
uint8 SOLID = 1
uint8 DASHED = 2
uint8 DLM = 3 
uint8 BOTTS = 4
uint8 DECELERATION = 5
uint8 HOV_LANE = 6

float64 Adjacent_Confidence
float64 Adjacent_View_Range_Start
float64 Adjacent_View_Range_End

# enum
uint8 Adjacent_Line_Role
uint8 NONE = 0
uint8 LEFT__LEFT_LANEMARK = 1
uint8 LEFT__RIGHT_LANEMARK = 2
uint8 RIGHT__LEFT_LANEMARK = 3
uint8 RIGHT__RIGHT_LANEMARK = 4

LHParam Adjacent_Line_C
================================================================================
MSG: data_parse/LHParam
float64 LH_C0
float64 LH_C1
float64 LH_C2
float64 LH_C3"""
  __slots__ = ['header','adject_lanes']
  _slot_types = ['std_msgs/Header','data_parse/AdjacentLane[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,adject_lanes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AdjacentLaneFrame, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.adject_lanes is None:
        self.adject_lanes = []
    else:
      self.header = std_msgs.msg.Header()
      self.adject_lanes = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.adject_lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.adject_lanes:
        _v1 = val1.header
        _x = _v1.seq
        buff.write(_get_struct_I().pack(_x))
        _v2 = _v1.stamp
        _x = _v2
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v1.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2B3dB().pack(_x.Lanes_Adjacent_Count, _x.Adjacent_Type, _x.Adjacent_Confidence, _x.Adjacent_View_Range_Start, _x.Adjacent_View_Range_End, _x.Adjacent_Line_Role))
        _v3 = val1.Adjacent_Line_C
        _x = _v3
        buff.write(_get_struct_4d().pack(_x.LH_C0, _x.LH_C1, _x.LH_C2, _x.LH_C3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.adject_lanes is None:
        self.adject_lanes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adject_lanes = []
      for i in range(0, length):
        val1 = data_parse.msg.AdjacentLane()
        _v4 = val1.header
        start = end
        end += 4
        (_v4.seq,) = _get_struct_I().unpack(str[start:end])
        _v5 = _v4.stamp
        _x = _v5
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.frame_id = str[start:end]
        _x = val1
        start = end
        end += 27
        (_x.Lanes_Adjacent_Count, _x.Adjacent_Type, _x.Adjacent_Confidence, _x.Adjacent_View_Range_Start, _x.Adjacent_View_Range_End, _x.Adjacent_Line_Role,) = _get_struct_2B3dB().unpack(str[start:end])
        _v6 = val1.Adjacent_Line_C
        _x = _v6
        start = end
        end += 32
        (_x.LH_C0, _x.LH_C1, _x.LH_C2, _x.LH_C3,) = _get_struct_4d().unpack(str[start:end])
        self.adject_lanes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.adject_lanes)
      buff.write(_struct_I.pack(length))
      for val1 in self.adject_lanes:
        _v7 = val1.header
        _x = _v7.seq
        buff.write(_get_struct_I().pack(_x))
        _v8 = _v7.stamp
        _x = _v8
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v7.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1
        buff.write(_get_struct_2B3dB().pack(_x.Lanes_Adjacent_Count, _x.Adjacent_Type, _x.Adjacent_Confidence, _x.Adjacent_View_Range_Start, _x.Adjacent_View_Range_End, _x.Adjacent_Line_Role))
        _v9 = val1.Adjacent_Line_C
        _x = _v9
        buff.write(_get_struct_4d().pack(_x.LH_C0, _x.LH_C1, _x.LH_C2, _x.LH_C3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.adject_lanes is None:
        self.adject_lanes = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.adject_lanes = []
      for i in range(0, length):
        val1 = data_parse.msg.AdjacentLane()
        _v10 = val1.header
        start = end
        end += 4
        (_v10.seq,) = _get_struct_I().unpack(str[start:end])
        _v11 = _v10.stamp
        _x = _v11
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v10.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v10.frame_id = str[start:end]
        _x = val1
        start = end
        end += 27
        (_x.Lanes_Adjacent_Count, _x.Adjacent_Type, _x.Adjacent_Confidence, _x.Adjacent_View_Range_Start, _x.Adjacent_View_Range_End, _x.Adjacent_Line_Role,) = _get_struct_2B3dB().unpack(str[start:end])
        _v12 = val1.Adjacent_Line_C
        _x = _v12
        start = end
        end += 32
        (_x.LH_C0, _x.LH_C1, _x.LH_C2, _x.LH_C3,) = _get_struct_4d().unpack(str[start:end])
        self.adject_lanes.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B3dB = None
def _get_struct_2B3dB():
    global _struct_2B3dB
    if _struct_2B3dB is None:
        _struct_2B3dB = struct.Struct("<2B3dB")
    return _struct_2B3dB
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
