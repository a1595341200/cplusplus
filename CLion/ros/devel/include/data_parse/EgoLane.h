// Generated by gencpp from file data_parse/EgoLane.msg
// DO NOT EDIT!


#ifndef DATA_PARSE_MESSAGE_EGOLANE_H
#define DATA_PARSE_MESSAGE_EGOLANE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <data_parse/LHParam.h>

namespace data_parse
{
template <class ContainerAllocator>
struct EgoLane_
{
  typedef EgoLane_<ContainerAllocator> Type;

  EgoLane_()
    : header()
    , Is_Construction_Area(false)
    , LH_Confidence(0.0)
    , LH_Lanemark_Type(0)
    , LH_Side(0)
    , LH_VR_Start(0.0)
    , LH_VR_End(0.0)
    , LH_C()  {
    }
  EgoLane_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , Is_Construction_Area(false)
    , LH_Confidence(0.0)
    , LH_Lanemark_Type(0)
    , LH_Side(0)
    , LH_VR_Start(0.0)
    , LH_VR_End(0.0)
    , LH_C(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _Is_Construction_Area_type;
  _Is_Construction_Area_type Is_Construction_Area;

   typedef double _LH_Confidence_type;
  _LH_Confidence_type LH_Confidence;

   typedef uint8_t _LH_Lanemark_Type_type;
  _LH_Lanemark_Type_type LH_Lanemark_Type;

   typedef uint8_t _LH_Side_type;
  _LH_Side_type LH_Side;

   typedef double _LH_VR_Start_type;
  _LH_VR_Start_type LH_VR_Start;

   typedef double _LH_VR_End_type;
  _LH_VR_End_type LH_VR_End;

   typedef  ::data_parse::LHParam_<ContainerAllocator>  _LH_C_type;
  _LH_C_type LH_C;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(UNDECIDED)
  #undef UNDECIDED
#endif
#if defined(_WIN32) && defined(SOLID)
  #undef SOLID
#endif
#if defined(_WIN32) && defined(DASHED)
  #undef DASHED
#endif
#if defined(_WIN32) && defined(DLM)
  #undef DLM
#endif
#if defined(_WIN32) && defined(BOTTS)
  #undef BOTTS
#endif
#if defined(_WIN32) && defined(DECELERATION)
  #undef DECELERATION
#endif
#if defined(_WIN32) && defined(HOV_LANE)
  #undef HOV_LANE
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(LEFT)
  #undef LEFT
#endif
#if defined(_WIN32) && defined(RIGHT)
  #undef RIGHT
#endif

  enum {
    UNDECIDED = 0u,
    SOLID = 1u,
    DASHED = 2u,
    DLM = 3u,
    BOTTS = 4u,
    DECELERATION = 5u,
    HOV_LANE = 6u,
    UNKNOWN = 0u,
    LEFT = 1u,
    RIGHT = 2u,
  };


  typedef boost::shared_ptr< ::data_parse::EgoLane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::data_parse::EgoLane_<ContainerAllocator> const> ConstPtr;

}; // struct EgoLane_

typedef ::data_parse::EgoLane_<std::allocator<void> > EgoLane;

typedef boost::shared_ptr< ::data_parse::EgoLane > EgoLanePtr;
typedef boost::shared_ptr< ::data_parse::EgoLane const> EgoLaneConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::data_parse::EgoLane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::data_parse::EgoLane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::data_parse::EgoLane_<ContainerAllocator1> & lhs, const ::data_parse::EgoLane_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.Is_Construction_Area == rhs.Is_Construction_Area &&
    lhs.LH_Confidence == rhs.LH_Confidence &&
    lhs.LH_Lanemark_Type == rhs.LH_Lanemark_Type &&
    lhs.LH_Side == rhs.LH_Side &&
    lhs.LH_VR_Start == rhs.LH_VR_Start &&
    lhs.LH_VR_End == rhs.LH_VR_End &&
    lhs.LH_C == rhs.LH_C;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::data_parse::EgoLane_<ContainerAllocator1> & lhs, const ::data_parse::EgoLane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace data_parse

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::data_parse::EgoLane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_parse::EgoLane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_parse::EgoLane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_parse::EgoLane_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_parse::EgoLane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_parse::EgoLane_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::data_parse::EgoLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c853a0afe8c4bc08d024aa3177156a39";
  }

  static const char* value(const ::data_parse::EgoLane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc853a0afe8c4bc08ULL;
  static const uint64_t static_value2 = 0xd024aa3177156a39ULL;
};

template<class ContainerAllocator>
struct DataType< ::data_parse::EgoLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "data_parse/EgoLane";
  }

  static const char* value(const ::data_parse::EgoLane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::data_parse::EgoLane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"bool Is_Construction_Area\n"
"\n"
"float64 LH_Confidence\n"
"\n"
"# enum\n"
"uint8 LH_Lanemark_Type \n"
"uint8 UNDECIDED = 0\n"
"uint8 SOLID = 1\n"
"uint8 DASHED = 2\n"
"uint8 DLM = 3 \n"
"uint8 BOTTS = 4\n"
"uint8 DECELERATION = 5\n"
"uint8 HOV_LANE = 6\n"
"\n"
"# enum\n"
"uint8 LH_Side\n"
"uint8 UNKNOWN = 0\n"
"uint8 LEFT = 1\n"
"uint8 RIGHT = 2\n"
"\n"
"float64 LH_VR_Start\n"
"float64 LH_VR_End\n"
"\n"
"LHParam LH_C\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: data_parse/LHParam\n"
"float64 LH_C0\n"
"float64 LH_C1\n"
"float64 LH_C2\n"
"float64 LH_C3\n"
;
  }

  static const char* value(const ::data_parse::EgoLane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::data_parse::EgoLane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.Is_Construction_Area);
      stream.next(m.LH_Confidence);
      stream.next(m.LH_Lanemark_Type);
      stream.next(m.LH_Side);
      stream.next(m.LH_VR_Start);
      stream.next(m.LH_VR_End);
      stream.next(m.LH_C);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EgoLane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::data_parse::EgoLane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::data_parse::EgoLane_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "Is_Construction_Area: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Is_Construction_Area);
    s << indent << "LH_Confidence: ";
    Printer<double>::stream(s, indent + "  ", v.LH_Confidence);
    s << indent << "LH_Lanemark_Type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LH_Lanemark_Type);
    s << indent << "LH_Side: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LH_Side);
    s << indent << "LH_VR_Start: ";
    Printer<double>::stream(s, indent + "  ", v.LH_VR_Start);
    s << indent << "LH_VR_End: ";
    Printer<double>::stream(s, indent + "  ", v.LH_VR_End);
    s << indent << "LH_C: ";
    s << std::endl;
    Printer< ::data_parse::LHParam_<ContainerAllocator> >::stream(s, indent + "  ", v.LH_C);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATA_PARSE_MESSAGE_EGOLANE_H
