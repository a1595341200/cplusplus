# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from data_parse/Object.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Object(genpy.Message):
  _md5sum = "5ec958fb840aae7c81d40f6c557b44f5"
  _type = "data_parse/Object"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# BO_ 1345 Objects_Header: 3 Vector__XXX
#  SG_ Sync_Frame_Index : 0|8@1+ (1,0) [0|255] "counter" Vector__XXX
#  SG_ Num_Of_Video_Objs : 8|4@1+ (1,0) [0|12] "counter" Vector__XXX
#  SG_ VD_CIPV_ID : 12|7@1+ (1,0) [0|127] "counter" Vector__XXX
#  SG_ VD_CIPV_Lost : 19|2@1+ (1,0) [0|2] "ENUM" Vector__XXX
#  SG_ OBJ_VD_Allow_Acc : 21|2@1+ (1,0) [0|2] "ENUM" Vector__XXX
#  SG_ Reserved : 23|1@1+ (1,0) [0|0] "NA" Vector__XXX

# BO_ 1280 Objects_Signals_A1: 7 Vector__XXX
#  SG_ Obj_ID_1 : 0|7@1+ (1,0) [0|127] "counter" Vector__XXX
#  SG_ Object_Class_1 : 7|3@1+ (1,0) [0|7] "ENUM" Vector__XXX
#  SG_ OBJ_Width_1 : 10|7@1+ (0.05,0) [0|6.35] "m" Vector__XXX
#  SG_ OBJ_Length_1 : 17|9@1+ (0.05,0) [0|25.5] "m" Vector__XXX
#  SG_ Relative_Long_Velocity_1 : 26|13@1+ (0.05,-120) [-120|130] "m/s" Vector__XXX
#  SG_ OBJ_Lane_Assignment_1 : 39|3@1+ (1,0) [0|5] "ENUM" Vector__XXX
#  SG_ Relative_Lat_Velocity_1 : 42|11@1+ (0.05,-50) [-50|50] "m/s" Vector__XXX
#  SG_ Reserved : 53|3@1+ (1,0) [0|0] "NA" Vector__XXX


# BO_ 1281 Objects_Signals_B1: 5 Vector__XXX
#  SG_ Absolute_Long_Acc_1 : 0|9@1+ (0.05,-12.8) [-12.8|12.75] "m/s2" Vector__XXX
#  SG_ Long_Distance_1 : 9|13@1+ (0.05,0) [0|350] "m" Vector__XXX
#  SG_ Lateral_Distance_1 : 22|12@1+ (0.05,-102.4) [-102.4|102.3] "m" Vector__XXX
#  SG_ Reserved : 34|6@1+ (1,0) [0|0] "NA" Vector__XXX


# BO_ 1282 Objects_Signals_C1: 7 Vector__XXX
#  SG_ Absolute_Speed_1 : 0|12@1+ (0.05,-100) [-100|100] "m/s" Vector__XXX
#  SG_ OBJ_Motion_Status_1 : 12|3@1+ (1,0) [0|4] "ENUM " Vector__XXX
#  SG_ OBJ_Motion_Category_1 : 15|4@1+ (1,0) [0|12] "ENUM " Vector__XXX
#  SG_ Brake_Light_1 : 19|1@1+ (1,0) [0|1] "bool" Vector__XXX
#  SG_ Turn_Indicator_Right_1 : 20|1@1+ (1,0) [0|1] "bool" Vector__XXX
#  SG_ Turn_Indicator_Left_1 : 21|1@1+ (1,0) [0|1] "bool" Vector__XXX
#  SG_ Light_indicator_validity_1 : 22|1@1+ (1,0) [0|1] "bool" Vector__XXX
#  SG_ OBJ_Angle_Mid_1 : 23|14@1+ (0.0002,-1.571) [-1.571|1.571] "rad" Vector__XXX
#  SG_ OBJ_Angle_Rate_1 : 37|12@1+ (0.002,-2.234) [-2.234|2.2318] "rad/s" Vector__XXX
#  SG_ Reserved : 49|7@1+ (1,0) [0|0] "NA" Vector__XXX

uint8 UNCLASSIFIED=0
uint8 UNKNOWN_SMALL=1
uint8 UNKNOWN_BIG=2
uint8 PEDESTRIAN=3
uint8 BIKE=4
uint8 CAR=5
uint8 TRUCK=6

#### ID of this object from tracking. 
#* Obj_ID_1
uint16 id

#### Number of scans this object has been tracked for.
int16 life_cycles

#### Most likely class of this object(see top)
#* Object_Class_1
uint8 classification

#### The higher this value is the more reliable is the assigned object class
float64 obstacle_probability

#### The higher this value is the more reliable is the assigned object class
float64 probability_existence

#### x,y,z in m
#* Long_Distance_1  Lateral_Distance_1
geometry_msgs/Vector3 center

#### position untertainty
geometry_msgs/Vector3 center_uncertainty

#### yaw angle 
#* OBJ_Angle_Rate_1  
#* OBJ_Angle_Mid_1 
float64 heading_angle 

#### yaw angle uncertainty
float64 heading_angle_uncertainty

#### Size of the object box in the object, X - length in m
#* OBJ_Length_1
float32 length

#### Size of the object box in the object, Y - length in m
#* OBJ_Width_1
float32 width

#### Size of the object box in the object, Z - length in m
float32 height

#### relative_velocity in m/s
#* Relative_Lat_Velocity_1  Relative_Long_Velocity_1
geometry_msgs/Vector3 relative_velocity

#### relative_velocity untertainty
geometry_msgs/Vector3 relative_velocity_uncertainty

#### relative_accelerate in m/s
geometry_msgs/Vector3 relative_accelerate

#### relative_accelerate untertainty
geometry_msgs/Vector3 relative_accelerate_uncertainty

#### absolute_velocity in m/s
#* Absolute_Speed_1
geometry_msgs/Vector3 absolute_velocity

#### absolute_velocity untertainty
geometry_msgs/Vector3 absolute_velocity_uncertainty

#### absolute_accelerate in m/s
#* Absolute_Long_Acc_1
geometry_msgs/Vector3 absolute_accelerate

#### absolute_accelerate untertainty
geometry_msgs/Vector3 absolute_accelerate_uncertainty

float64 ObjNearestPtX
float64 ObjNearestPtY
float64 ObjNearestPtZ

uint8 chks
uint8 cntr
uint8 dynamic_property
uint8 snr
float64 rcs
float64 classification_confidence
uint8 update_bit
uint8 update_flag
uint8 valid_flag
float64 speed
float64 accelerate
uint8 vision_id
uint8 CllsnMtgtnByBrkgPrimQly
uint8 CllsnMtgtnByBrkgSecQly
uint8 EmgyLaneKeepAidPosnQly
uint8 CllsnWarnFwdQly

uint8 fusion_source

float64 time_stamp

#float64 isp_time_stamp

# enum
#uint8 Cms_confidence
#uint8 CmsConfidence1_Invalid = 0
#uint8 CmsConfidence1_Valid = 1
#uint8 CmsConfidence1_Reserved = 2
#uint8 CmsConfidence1_Reserved1 = 3


float64 lane_offset_right
float64 lane_offset_right_dev


# ENUM for classification
uint8 CLASS_UNKNOWN              = 0
uint8 CLASS_CAR                  = 1
uint8 CLASS_TRUCK                = 2
uint8 CLASS_MOTORCYCLE           = 3
uint8 CLASS_CYCLIST              = 4   # bicyle, E-Scooter, tricyclist
uint8 CLASS_PEDESTRIAN           = 5
uint8 CLASS_ROAD_BARRIER         = 6   # traffic cone, parking gate, road barrier
uint8 CLASS_MAX_NUM              = 7


# ENUM for flash light status of the object
uint8 INDICATOR_UNDEFINED        = 0   # Flash light status is not defined for non-vehicle objects
uint8 INDICATOR_OFF              = 1   # Flash light is currenhtly not active
uint8 INDICATOR_RIGHT            = 2   # Right flash light is on and/or blinking
uint8 INDICATOR_LEFT             = 3   # Left flash light is on and/or blinking
uint8 INDICATOR_BOTH             = 4   # Flash lights from both side are on and/or blinking

# Flash light status of the object, if applicable (see enum for details)
#* Turn_Indicator_Left_1 Turn_Indicator_Right_1
uint8 indicator_state                  # [INDICATOR_*]

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  # Pseudo-constants
  UNCLASSIFIED = 0
  UNKNOWN_SMALL = 1
  UNKNOWN_BIG = 2
  PEDESTRIAN = 3
  BIKE = 4
  CAR = 5
  TRUCK = 6
  CLASS_UNKNOWN = 0
  CLASS_CAR = 1
  CLASS_TRUCK = 2
  CLASS_MOTORCYCLE = 3
  CLASS_CYCLIST = 4
  CLASS_PEDESTRIAN = 5
  CLASS_ROAD_BARRIER = 6
  CLASS_MAX_NUM = 7
  INDICATOR_UNDEFINED = 0
  INDICATOR_OFF = 1
  INDICATOR_RIGHT = 2
  INDICATOR_LEFT = 3
  INDICATOR_BOTH = 4

  __slots__ = ['id','life_cycles','classification','obstacle_probability','probability_existence','center','center_uncertainty','heading_angle','heading_angle_uncertainty','length','width','height','relative_velocity','relative_velocity_uncertainty','relative_accelerate','relative_accelerate_uncertainty','absolute_velocity','absolute_velocity_uncertainty','absolute_accelerate','absolute_accelerate_uncertainty','ObjNearestPtX','ObjNearestPtY','ObjNearestPtZ','chks','cntr','dynamic_property','snr','rcs','classification_confidence','update_bit','update_flag','valid_flag','speed','accelerate','vision_id','CllsnMtgtnByBrkgPrimQly','CllsnMtgtnByBrkgSecQly','EmgyLaneKeepAidPosnQly','CllsnWarnFwdQly','fusion_source','time_stamp','lane_offset_right','lane_offset_right_dev','indicator_state']
  _slot_types = ['uint16','int16','uint8','float64','float64','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','float64','float32','float32','float32','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','float64','float64','uint8','uint8','uint8','uint8','float64','float64','uint8','uint8','uint8','float64','float64','uint8','uint8','uint8','uint8','uint8','uint8','float64','float64','float64','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,life_cycles,classification,obstacle_probability,probability_existence,center,center_uncertainty,heading_angle,heading_angle_uncertainty,length,width,height,relative_velocity,relative_velocity_uncertainty,relative_accelerate,relative_accelerate_uncertainty,absolute_velocity,absolute_velocity_uncertainty,absolute_accelerate,absolute_accelerate_uncertainty,ObjNearestPtX,ObjNearestPtY,ObjNearestPtZ,chks,cntr,dynamic_property,snr,rcs,classification_confidence,update_bit,update_flag,valid_flag,speed,accelerate,vision_id,CllsnMtgtnByBrkgPrimQly,CllsnMtgtnByBrkgSecQly,EmgyLaneKeepAidPosnQly,CllsnWarnFwdQly,fusion_source,time_stamp,lane_offset_right,lane_offset_right_dev,indicator_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Object, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.life_cycles is None:
        self.life_cycles = 0
      if self.classification is None:
        self.classification = 0
      if self.obstacle_probability is None:
        self.obstacle_probability = 0.
      if self.probability_existence is None:
        self.probability_existence = 0.
      if self.center is None:
        self.center = geometry_msgs.msg.Vector3()
      if self.center_uncertainty is None:
        self.center_uncertainty = geometry_msgs.msg.Vector3()
      if self.heading_angle is None:
        self.heading_angle = 0.
      if self.heading_angle_uncertainty is None:
        self.heading_angle_uncertainty = 0.
      if self.length is None:
        self.length = 0.
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
      if self.relative_velocity is None:
        self.relative_velocity = geometry_msgs.msg.Vector3()
      if self.relative_velocity_uncertainty is None:
        self.relative_velocity_uncertainty = geometry_msgs.msg.Vector3()
      if self.relative_accelerate is None:
        self.relative_accelerate = geometry_msgs.msg.Vector3()
      if self.relative_accelerate_uncertainty is None:
        self.relative_accelerate_uncertainty = geometry_msgs.msg.Vector3()
      if self.absolute_velocity is None:
        self.absolute_velocity = geometry_msgs.msg.Vector3()
      if self.absolute_velocity_uncertainty is None:
        self.absolute_velocity_uncertainty = geometry_msgs.msg.Vector3()
      if self.absolute_accelerate is None:
        self.absolute_accelerate = geometry_msgs.msg.Vector3()
      if self.absolute_accelerate_uncertainty is None:
        self.absolute_accelerate_uncertainty = geometry_msgs.msg.Vector3()
      if self.ObjNearestPtX is None:
        self.ObjNearestPtX = 0.
      if self.ObjNearestPtY is None:
        self.ObjNearestPtY = 0.
      if self.ObjNearestPtZ is None:
        self.ObjNearestPtZ = 0.
      if self.chks is None:
        self.chks = 0
      if self.cntr is None:
        self.cntr = 0
      if self.dynamic_property is None:
        self.dynamic_property = 0
      if self.snr is None:
        self.snr = 0
      if self.rcs is None:
        self.rcs = 0.
      if self.classification_confidence is None:
        self.classification_confidence = 0.
      if self.update_bit is None:
        self.update_bit = 0
      if self.update_flag is None:
        self.update_flag = 0
      if self.valid_flag is None:
        self.valid_flag = 0
      if self.speed is None:
        self.speed = 0.
      if self.accelerate is None:
        self.accelerate = 0.
      if self.vision_id is None:
        self.vision_id = 0
      if self.CllsnMtgtnByBrkgPrimQly is None:
        self.CllsnMtgtnByBrkgPrimQly = 0
      if self.CllsnMtgtnByBrkgSecQly is None:
        self.CllsnMtgtnByBrkgSecQly = 0
      if self.EmgyLaneKeepAidPosnQly is None:
        self.EmgyLaneKeepAidPosnQly = 0
      if self.CllsnWarnFwdQly is None:
        self.CllsnWarnFwdQly = 0
      if self.fusion_source is None:
        self.fusion_source = 0
      if self.time_stamp is None:
        self.time_stamp = 0.
      if self.lane_offset_right is None:
        self.lane_offset_right = 0.
      if self.lane_offset_right_dev is None:
        self.lane_offset_right_dev = 0.
      if self.indicator_state is None:
        self.indicator_state = 0
    else:
      self.id = 0
      self.life_cycles = 0
      self.classification = 0
      self.obstacle_probability = 0.
      self.probability_existence = 0.
      self.center = geometry_msgs.msg.Vector3()
      self.center_uncertainty = geometry_msgs.msg.Vector3()
      self.heading_angle = 0.
      self.heading_angle_uncertainty = 0.
      self.length = 0.
      self.width = 0.
      self.height = 0.
      self.relative_velocity = geometry_msgs.msg.Vector3()
      self.relative_velocity_uncertainty = geometry_msgs.msg.Vector3()
      self.relative_accelerate = geometry_msgs.msg.Vector3()
      self.relative_accelerate_uncertainty = geometry_msgs.msg.Vector3()
      self.absolute_velocity = geometry_msgs.msg.Vector3()
      self.absolute_velocity_uncertainty = geometry_msgs.msg.Vector3()
      self.absolute_accelerate = geometry_msgs.msg.Vector3()
      self.absolute_accelerate_uncertainty = geometry_msgs.msg.Vector3()
      self.ObjNearestPtX = 0.
      self.ObjNearestPtY = 0.
      self.ObjNearestPtZ = 0.
      self.chks = 0
      self.cntr = 0
      self.dynamic_property = 0
      self.snr = 0
      self.rcs = 0.
      self.classification_confidence = 0.
      self.update_bit = 0
      self.update_flag = 0
      self.valid_flag = 0
      self.speed = 0.
      self.accelerate = 0.
      self.vision_id = 0
      self.CllsnMtgtnByBrkgPrimQly = 0
      self.CllsnMtgtnByBrkgSecQly = 0
      self.EmgyLaneKeepAidPosnQly = 0
      self.CllsnWarnFwdQly = 0
      self.fusion_source = 0
      self.time_stamp = 0.
      self.lane_offset_right = 0.
      self.lane_offset_right_dev = 0.
      self.indicator_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_HhB10d3f27d4B2d3B2d6B3dB().pack(_x.id, _x.life_cycles, _x.classification, _x.obstacle_probability, _x.probability_existence, _x.center.x, _x.center.y, _x.center.z, _x.center_uncertainty.x, _x.center_uncertainty.y, _x.center_uncertainty.z, _x.heading_angle, _x.heading_angle_uncertainty, _x.length, _x.width, _x.height, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity.z, _x.relative_velocity_uncertainty.x, _x.relative_velocity_uncertainty.y, _x.relative_velocity_uncertainty.z, _x.relative_accelerate.x, _x.relative_accelerate.y, _x.relative_accelerate.z, _x.relative_accelerate_uncertainty.x, _x.relative_accelerate_uncertainty.y, _x.relative_accelerate_uncertainty.z, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity.z, _x.absolute_velocity_uncertainty.x, _x.absolute_velocity_uncertainty.y, _x.absolute_velocity_uncertainty.z, _x.absolute_accelerate.x, _x.absolute_accelerate.y, _x.absolute_accelerate.z, _x.absolute_accelerate_uncertainty.x, _x.absolute_accelerate_uncertainty.y, _x.absolute_accelerate_uncertainty.z, _x.ObjNearestPtX, _x.ObjNearestPtY, _x.ObjNearestPtZ, _x.chks, _x.cntr, _x.dynamic_property, _x.snr, _x.rcs, _x.classification_confidence, _x.update_bit, _x.update_flag, _x.valid_flag, _x.speed, _x.accelerate, _x.vision_id, _x.CllsnMtgtnByBrkgPrimQly, _x.CllsnMtgtnByBrkgSecQly, _x.EmgyLaneKeepAidPosnQly, _x.CllsnWarnFwdQly, _x.fusion_source, _x.time_stamp, _x.lane_offset_right, _x.lane_offset_right_dev, _x.indicator_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.center is None:
        self.center = geometry_msgs.msg.Vector3()
      if self.center_uncertainty is None:
        self.center_uncertainty = geometry_msgs.msg.Vector3()
      if self.relative_velocity is None:
        self.relative_velocity = geometry_msgs.msg.Vector3()
      if self.relative_velocity_uncertainty is None:
        self.relative_velocity_uncertainty = geometry_msgs.msg.Vector3()
      if self.relative_accelerate is None:
        self.relative_accelerate = geometry_msgs.msg.Vector3()
      if self.relative_accelerate_uncertainty is None:
        self.relative_accelerate_uncertainty = geometry_msgs.msg.Vector3()
      if self.absolute_velocity is None:
        self.absolute_velocity = geometry_msgs.msg.Vector3()
      if self.absolute_velocity_uncertainty is None:
        self.absolute_velocity_uncertainty = geometry_msgs.msg.Vector3()
      if self.absolute_accelerate is None:
        self.absolute_accelerate = geometry_msgs.msg.Vector3()
      if self.absolute_accelerate_uncertainty is None:
        self.absolute_accelerate_uncertainty = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 383
      (_x.id, _x.life_cycles, _x.classification, _x.obstacle_probability, _x.probability_existence, _x.center.x, _x.center.y, _x.center.z, _x.center_uncertainty.x, _x.center_uncertainty.y, _x.center_uncertainty.z, _x.heading_angle, _x.heading_angle_uncertainty, _x.length, _x.width, _x.height, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity.z, _x.relative_velocity_uncertainty.x, _x.relative_velocity_uncertainty.y, _x.relative_velocity_uncertainty.z, _x.relative_accelerate.x, _x.relative_accelerate.y, _x.relative_accelerate.z, _x.relative_accelerate_uncertainty.x, _x.relative_accelerate_uncertainty.y, _x.relative_accelerate_uncertainty.z, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity.z, _x.absolute_velocity_uncertainty.x, _x.absolute_velocity_uncertainty.y, _x.absolute_velocity_uncertainty.z, _x.absolute_accelerate.x, _x.absolute_accelerate.y, _x.absolute_accelerate.z, _x.absolute_accelerate_uncertainty.x, _x.absolute_accelerate_uncertainty.y, _x.absolute_accelerate_uncertainty.z, _x.ObjNearestPtX, _x.ObjNearestPtY, _x.ObjNearestPtZ, _x.chks, _x.cntr, _x.dynamic_property, _x.snr, _x.rcs, _x.classification_confidence, _x.update_bit, _x.update_flag, _x.valid_flag, _x.speed, _x.accelerate, _x.vision_id, _x.CllsnMtgtnByBrkgPrimQly, _x.CllsnMtgtnByBrkgSecQly, _x.EmgyLaneKeepAidPosnQly, _x.CllsnWarnFwdQly, _x.fusion_source, _x.time_stamp, _x.lane_offset_right, _x.lane_offset_right_dev, _x.indicator_state,) = _get_struct_HhB10d3f27d4B2d3B2d6B3dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_HhB10d3f27d4B2d3B2d6B3dB().pack(_x.id, _x.life_cycles, _x.classification, _x.obstacle_probability, _x.probability_existence, _x.center.x, _x.center.y, _x.center.z, _x.center_uncertainty.x, _x.center_uncertainty.y, _x.center_uncertainty.z, _x.heading_angle, _x.heading_angle_uncertainty, _x.length, _x.width, _x.height, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity.z, _x.relative_velocity_uncertainty.x, _x.relative_velocity_uncertainty.y, _x.relative_velocity_uncertainty.z, _x.relative_accelerate.x, _x.relative_accelerate.y, _x.relative_accelerate.z, _x.relative_accelerate_uncertainty.x, _x.relative_accelerate_uncertainty.y, _x.relative_accelerate_uncertainty.z, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity.z, _x.absolute_velocity_uncertainty.x, _x.absolute_velocity_uncertainty.y, _x.absolute_velocity_uncertainty.z, _x.absolute_accelerate.x, _x.absolute_accelerate.y, _x.absolute_accelerate.z, _x.absolute_accelerate_uncertainty.x, _x.absolute_accelerate_uncertainty.y, _x.absolute_accelerate_uncertainty.z, _x.ObjNearestPtX, _x.ObjNearestPtY, _x.ObjNearestPtZ, _x.chks, _x.cntr, _x.dynamic_property, _x.snr, _x.rcs, _x.classification_confidence, _x.update_bit, _x.update_flag, _x.valid_flag, _x.speed, _x.accelerate, _x.vision_id, _x.CllsnMtgtnByBrkgPrimQly, _x.CllsnMtgtnByBrkgSecQly, _x.EmgyLaneKeepAidPosnQly, _x.CllsnWarnFwdQly, _x.fusion_source, _x.time_stamp, _x.lane_offset_right, _x.lane_offset_right_dev, _x.indicator_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.center is None:
        self.center = geometry_msgs.msg.Vector3()
      if self.center_uncertainty is None:
        self.center_uncertainty = geometry_msgs.msg.Vector3()
      if self.relative_velocity is None:
        self.relative_velocity = geometry_msgs.msg.Vector3()
      if self.relative_velocity_uncertainty is None:
        self.relative_velocity_uncertainty = geometry_msgs.msg.Vector3()
      if self.relative_accelerate is None:
        self.relative_accelerate = geometry_msgs.msg.Vector3()
      if self.relative_accelerate_uncertainty is None:
        self.relative_accelerate_uncertainty = geometry_msgs.msg.Vector3()
      if self.absolute_velocity is None:
        self.absolute_velocity = geometry_msgs.msg.Vector3()
      if self.absolute_velocity_uncertainty is None:
        self.absolute_velocity_uncertainty = geometry_msgs.msg.Vector3()
      if self.absolute_accelerate is None:
        self.absolute_accelerate = geometry_msgs.msg.Vector3()
      if self.absolute_accelerate_uncertainty is None:
        self.absolute_accelerate_uncertainty = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 383
      (_x.id, _x.life_cycles, _x.classification, _x.obstacle_probability, _x.probability_existence, _x.center.x, _x.center.y, _x.center.z, _x.center_uncertainty.x, _x.center_uncertainty.y, _x.center_uncertainty.z, _x.heading_angle, _x.heading_angle_uncertainty, _x.length, _x.width, _x.height, _x.relative_velocity.x, _x.relative_velocity.y, _x.relative_velocity.z, _x.relative_velocity_uncertainty.x, _x.relative_velocity_uncertainty.y, _x.relative_velocity_uncertainty.z, _x.relative_accelerate.x, _x.relative_accelerate.y, _x.relative_accelerate.z, _x.relative_accelerate_uncertainty.x, _x.relative_accelerate_uncertainty.y, _x.relative_accelerate_uncertainty.z, _x.absolute_velocity.x, _x.absolute_velocity.y, _x.absolute_velocity.z, _x.absolute_velocity_uncertainty.x, _x.absolute_velocity_uncertainty.y, _x.absolute_velocity_uncertainty.z, _x.absolute_accelerate.x, _x.absolute_accelerate.y, _x.absolute_accelerate.z, _x.absolute_accelerate_uncertainty.x, _x.absolute_accelerate_uncertainty.y, _x.absolute_accelerate_uncertainty.z, _x.ObjNearestPtX, _x.ObjNearestPtY, _x.ObjNearestPtZ, _x.chks, _x.cntr, _x.dynamic_property, _x.snr, _x.rcs, _x.classification_confidence, _x.update_bit, _x.update_flag, _x.valid_flag, _x.speed, _x.accelerate, _x.vision_id, _x.CllsnMtgtnByBrkgPrimQly, _x.CllsnMtgtnByBrkgSecQly, _x.EmgyLaneKeepAidPosnQly, _x.CllsnWarnFwdQly, _x.fusion_source, _x.time_stamp, _x.lane_offset_right, _x.lane_offset_right_dev, _x.indicator_state,) = _get_struct_HhB10d3f27d4B2d3B2d6B3dB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_HhB10d3f27d4B2d3B2d6B3dB = None
def _get_struct_HhB10d3f27d4B2d3B2d6B3dB():
    global _struct_HhB10d3f27d4B2d3B2d6B3dB
    if _struct_HhB10d3f27d4B2d3B2d6B3dB is None:
        _struct_HhB10d3f27d4B2d3B2d6B3dB = struct.Struct("<HhB10d3f27d4B2d3B2d6B3dB")
    return _struct_HhB10d3f27d4B2d3B2d6B3dB
