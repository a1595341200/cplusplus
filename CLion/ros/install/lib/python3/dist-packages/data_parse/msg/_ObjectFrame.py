# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from data_parse/ObjectFrame.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import data_parse.msg
import geometry_msgs.msg
import std_msgs.msg

class ObjectFrame(genpy.Message):
  _md5sum = "c4b338d30c7b19bee12d9930eae95422"
  _type = "data_parse/ObjectFrame"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

float64 HostSpeed
float64 HostYawRate
float64 StsBlkd0bin
uint8 StsBlkdConf
uint8 StsChks
uint8 StsCntr
uint8 StsDstbc
uint8 StsEna
uint8 StsFaulty
uint8 StsIfVersMajor
uint8 StsIfVersMinor
float64 StsLatency
uint8 StsMisAlign
uint8 StsMissCom
uint8 StsRdrNrDetn
uint8 StsRdrNrObj
uint8 StsSftyFlt
float64 StsTiStamp
uint8 StsWhlSpdCmpFac
uint8 TiStampStsGlbTiBas
uint8 TiStampStsSyncToGatewy
uint8 TiStampStsTiLeap
uint8 TiStampStsTiOut

uint8 sensor_type

uint8 Blockage
uint8 Calibration
uint8 Fault

Object[] objects
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: data_parse/Object
# BO_ 1345 Objects_Header: 3 Vector__XXX
#  SG_ Sync_Frame_Index : 0|8@1+ (1,0) [0|255] "counter" Vector__XXX
#  SG_ Num_Of_Video_Objs : 8|4@1+ (1,0) [0|12] "counter" Vector__XXX
#  SG_ VD_CIPV_ID : 12|7@1+ (1,0) [0|127] "counter" Vector__XXX
#  SG_ VD_CIPV_Lost : 19|2@1+ (1,0) [0|2] "ENUM" Vector__XXX
#  SG_ OBJ_VD_Allow_Acc : 21|2@1+ (1,0) [0|2] "ENUM" Vector__XXX
#  SG_ Reserved : 23|1@1+ (1,0) [0|0] "NA" Vector__XXX

# BO_ 1280 Objects_Signals_A1: 7 Vector__XXX
#  SG_ Obj_ID_1 : 0|7@1+ (1,0) [0|127] "counter" Vector__XXX
#  SG_ Object_Class_1 : 7|3@1+ (1,0) [0|7] "ENUM" Vector__XXX
#  SG_ OBJ_Width_1 : 10|7@1+ (0.05,0) [0|6.35] "m" Vector__XXX
#  SG_ OBJ_Length_1 : 17|9@1+ (0.05,0) [0|25.5] "m" Vector__XXX
#  SG_ Relative_Long_Velocity_1 : 26|13@1+ (0.05,-120) [-120|130] "m/s" Vector__XXX
#  SG_ OBJ_Lane_Assignment_1 : 39|3@1+ (1,0) [0|5] "ENUM" Vector__XXX
#  SG_ Relative_Lat_Velocity_1 : 42|11@1+ (0.05,-50) [-50|50] "m/s" Vector__XXX
#  SG_ Reserved : 53|3@1+ (1,0) [0|0] "NA" Vector__XXX


# BO_ 1281 Objects_Signals_B1: 5 Vector__XXX
#  SG_ Absolute_Long_Acc_1 : 0|9@1+ (0.05,-12.8) [-12.8|12.75] "m/s2" Vector__XXX
#  SG_ Long_Distance_1 : 9|13@1+ (0.05,0) [0|350] "m" Vector__XXX
#  SG_ Lateral_Distance_1 : 22|12@1+ (0.05,-102.4) [-102.4|102.3] "m" Vector__XXX
#  SG_ Reserved : 34|6@1+ (1,0) [0|0] "NA" Vector__XXX


# BO_ 1282 Objects_Signals_C1: 7 Vector__XXX
#  SG_ Absolute_Speed_1 : 0|12@1+ (0.05,-100) [-100|100] "m/s" Vector__XXX
#  SG_ OBJ_Motion_Status_1 : 12|3@1+ (1,0) [0|4] "ENUM " Vector__XXX
#  SG_ OBJ_Motion_Category_1 : 15|4@1+ (1,0) [0|12] "ENUM " Vector__XXX
#  SG_ Brake_Light_1 : 19|1@1+ (1,0) [0|1] "bool" Vector__XXX
#  SG_ Turn_Indicator_Right_1 : 20|1@1+ (1,0) [0|1] "bool" Vector__XXX
#  SG_ Turn_Indicator_Left_1 : 21|1@1+ (1,0) [0|1] "bool" Vector__XXX
#  SG_ Light_indicator_validity_1 : 22|1@1+ (1,0) [0|1] "bool" Vector__XXX
#  SG_ OBJ_Angle_Mid_1 : 23|14@1+ (0.0002,-1.571) [-1.571|1.571] "rad" Vector__XXX
#  SG_ OBJ_Angle_Rate_1 : 37|12@1+ (0.002,-2.234) [-2.234|2.2318] "rad/s" Vector__XXX
#  SG_ Reserved : 49|7@1+ (1,0) [0|0] "NA" Vector__XXX

uint8 UNCLASSIFIED=0
uint8 UNKNOWN_SMALL=1
uint8 UNKNOWN_BIG=2
uint8 PEDESTRIAN=3
uint8 BIKE=4
uint8 CAR=5
uint8 TRUCK=6

#### ID of this object from tracking. 
#* Obj_ID_1
uint16 id

#### Number of scans this object has been tracked for.
int16 life_cycles

#### Most likely class of this object(see top)
#* Object_Class_1
uint8 classification

#### The higher this value is the more reliable is the assigned object class
float64 obstacle_probability

#### The higher this value is the more reliable is the assigned object class
float64 probability_existence

#### x,y,z in m
#* Long_Distance_1  Lateral_Distance_1
geometry_msgs/Vector3 center

#### position untertainty
geometry_msgs/Vector3 center_uncertainty

#### yaw angle 
#* OBJ_Angle_Rate_1  
#* OBJ_Angle_Mid_1 
float64 heading_angle 

#### yaw angle uncertainty
float64 heading_angle_uncertainty

#### Size of the object box in the object, X - length in m
#* OBJ_Length_1
float32 length

#### Size of the object box in the object, Y - length in m
#* OBJ_Width_1
float32 width

#### Size of the object box in the object, Z - length in m
float32 height

#### relative_velocity in m/s
#* Relative_Lat_Velocity_1  Relative_Long_Velocity_1
geometry_msgs/Vector3 relative_velocity

#### relative_velocity untertainty
geometry_msgs/Vector3 relative_velocity_uncertainty

#### relative_accelerate in m/s
geometry_msgs/Vector3 relative_accelerate

#### relative_accelerate untertainty
geometry_msgs/Vector3 relative_accelerate_uncertainty

#### absolute_velocity in m/s
#* Absolute_Speed_1
geometry_msgs/Vector3 absolute_velocity

#### absolute_velocity untertainty
geometry_msgs/Vector3 absolute_velocity_uncertainty

#### absolute_accelerate in m/s
#* Absolute_Long_Acc_1
geometry_msgs/Vector3 absolute_accelerate

#### absolute_accelerate untertainty
geometry_msgs/Vector3 absolute_accelerate_uncertainty

float64 ObjNearestPtX
float64 ObjNearestPtY
float64 ObjNearestPtZ

uint8 chks
uint8 cntr
uint8 dynamic_property
uint8 snr
float64 rcs
float64 classification_confidence
uint8 update_bit
uint8 update_flag
uint8 valid_flag
float64 speed
float64 accelerate
uint8 vision_id
uint8 CllsnMtgtnByBrkgPrimQly
uint8 CllsnMtgtnByBrkgSecQly
uint8 EmgyLaneKeepAidPosnQly
uint8 CllsnWarnFwdQly

uint8 fusion_source

float64 time_stamp

#float64 isp_time_stamp

# enum
#uint8 Cms_confidence
#uint8 CmsConfidence1_Invalid = 0
#uint8 CmsConfidence1_Valid = 1
#uint8 CmsConfidence1_Reserved = 2
#uint8 CmsConfidence1_Reserved1 = 3


float64 lane_offset_right
float64 lane_offset_right_dev


# ENUM for classification
uint8 CLASS_UNKNOWN              = 0
uint8 CLASS_CAR                  = 1
uint8 CLASS_TRUCK                = 2
uint8 CLASS_MOTORCYCLE           = 3
uint8 CLASS_CYCLIST              = 4   # bicyle, E-Scooter, tricyclist
uint8 CLASS_PEDESTRIAN           = 5
uint8 CLASS_ROAD_BARRIER         = 6   # traffic cone, parking gate, road barrier
uint8 CLASS_MAX_NUM              = 7


# ENUM for flash light status of the object
uint8 INDICATOR_UNDEFINED        = 0   # Flash light status is not defined for non-vehicle objects
uint8 INDICATOR_OFF              = 1   # Flash light is currenhtly not active
uint8 INDICATOR_RIGHT            = 2   # Right flash light is on and/or blinking
uint8 INDICATOR_LEFT             = 3   # Left flash light is on and/or blinking
uint8 INDICATOR_BOTH             = 4   # Flash lights from both side are on and/or blinking

# Flash light status of the object, if applicable (see enum for details)
#* Turn_Indicator_Left_1 Turn_Indicator_Right_1
uint8 indicator_state                  # [INDICATOR_*]

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','HostSpeed','HostYawRate','StsBlkd0bin','StsBlkdConf','StsChks','StsCntr','StsDstbc','StsEna','StsFaulty','StsIfVersMajor','StsIfVersMinor','StsLatency','StsMisAlign','StsMissCom','StsRdrNrDetn','StsRdrNrObj','StsSftyFlt','StsTiStamp','StsWhlSpdCmpFac','TiStampStsGlbTiBas','TiStampStsSyncToGatewy','TiStampStsTiLeap','TiStampStsTiOut','sensor_type','Blockage','Calibration','Fault','objects']
  _slot_types = ['std_msgs/Header','float64','float64','float64','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float64','uint8','uint8','uint8','uint8','uint8','float64','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','data_parse/Object[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,HostSpeed,HostYawRate,StsBlkd0bin,StsBlkdConf,StsChks,StsCntr,StsDstbc,StsEna,StsFaulty,StsIfVersMajor,StsIfVersMinor,StsLatency,StsMisAlign,StsMissCom,StsRdrNrDetn,StsRdrNrObj,StsSftyFlt,StsTiStamp,StsWhlSpdCmpFac,TiStampStsGlbTiBas,TiStampStsSyncToGatewy,TiStampStsTiLeap,TiStampStsTiOut,sensor_type,Blockage,Calibration,Fault,objects

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObjectFrame, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.HostSpeed is None:
        self.HostSpeed = 0.
      if self.HostYawRate is None:
        self.HostYawRate = 0.
      if self.StsBlkd0bin is None:
        self.StsBlkd0bin = 0.
      if self.StsBlkdConf is None:
        self.StsBlkdConf = 0
      if self.StsChks is None:
        self.StsChks = 0
      if self.StsCntr is None:
        self.StsCntr = 0
      if self.StsDstbc is None:
        self.StsDstbc = 0
      if self.StsEna is None:
        self.StsEna = 0
      if self.StsFaulty is None:
        self.StsFaulty = 0
      if self.StsIfVersMajor is None:
        self.StsIfVersMajor = 0
      if self.StsIfVersMinor is None:
        self.StsIfVersMinor = 0
      if self.StsLatency is None:
        self.StsLatency = 0.
      if self.StsMisAlign is None:
        self.StsMisAlign = 0
      if self.StsMissCom is None:
        self.StsMissCom = 0
      if self.StsRdrNrDetn is None:
        self.StsRdrNrDetn = 0
      if self.StsRdrNrObj is None:
        self.StsRdrNrObj = 0
      if self.StsSftyFlt is None:
        self.StsSftyFlt = 0
      if self.StsTiStamp is None:
        self.StsTiStamp = 0.
      if self.StsWhlSpdCmpFac is None:
        self.StsWhlSpdCmpFac = 0
      if self.TiStampStsGlbTiBas is None:
        self.TiStampStsGlbTiBas = 0
      if self.TiStampStsSyncToGatewy is None:
        self.TiStampStsSyncToGatewy = 0
      if self.TiStampStsTiLeap is None:
        self.TiStampStsTiLeap = 0
      if self.TiStampStsTiOut is None:
        self.TiStampStsTiOut = 0
      if self.sensor_type is None:
        self.sensor_type = 0
      if self.Blockage is None:
        self.Blockage = 0
      if self.Calibration is None:
        self.Calibration = 0
      if self.Fault is None:
        self.Fault = 0
      if self.objects is None:
        self.objects = []
    else:
      self.header = std_msgs.msg.Header()
      self.HostSpeed = 0.
      self.HostYawRate = 0.
      self.StsBlkd0bin = 0.
      self.StsBlkdConf = 0
      self.StsChks = 0
      self.StsCntr = 0
      self.StsDstbc = 0
      self.StsEna = 0
      self.StsFaulty = 0
      self.StsIfVersMajor = 0
      self.StsIfVersMinor = 0
      self.StsLatency = 0.
      self.StsMisAlign = 0
      self.StsMissCom = 0
      self.StsRdrNrDetn = 0
      self.StsRdrNrObj = 0
      self.StsSftyFlt = 0
      self.StsTiStamp = 0.
      self.StsWhlSpdCmpFac = 0
      self.TiStampStsGlbTiBas = 0
      self.TiStampStsSyncToGatewy = 0
      self.TiStampStsTiLeap = 0
      self.TiStampStsTiOut = 0
      self.sensor_type = 0
      self.Blockage = 0
      self.Calibration = 0
      self.Fault = 0
      self.objects = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d8Bd5Bd9B().pack(_x.HostSpeed, _x.HostYawRate, _x.StsBlkd0bin, _x.StsBlkdConf, _x.StsChks, _x.StsCntr, _x.StsDstbc, _x.StsEna, _x.StsFaulty, _x.StsIfVersMajor, _x.StsIfVersMinor, _x.StsLatency, _x.StsMisAlign, _x.StsMissCom, _x.StsRdrNrDetn, _x.StsRdrNrObj, _x.StsSftyFlt, _x.StsTiStamp, _x.StsWhlSpdCmpFac, _x.TiStampStsGlbTiBas, _x.TiStampStsSyncToGatewy, _x.TiStampStsTiLeap, _x.TiStampStsTiOut, _x.sensor_type, _x.Blockage, _x.Calibration, _x.Fault))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1
        buff.write(_get_struct_HhB2d().pack(_x.id, _x.life_cycles, _x.classification, _x.obstacle_probability, _x.probability_existence))
        _v1 = val1.center
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v2 = val1.center_uncertainty
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2d3f().pack(_x.heading_angle, _x.heading_angle_uncertainty, _x.length, _x.width, _x.height))
        _v3 = val1.relative_velocity
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v4 = val1.relative_velocity_uncertainty
        _x = _v4
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v5 = val1.relative_accelerate
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v6 = val1.relative_accelerate_uncertainty
        _x = _v6
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = val1.absolute_velocity
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v8 = val1.absolute_velocity_uncertainty
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = val1.absolute_accelerate
        _x = _v9
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v10 = val1.absolute_accelerate_uncertainty
        _x = _v10
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_3d4B2d3B2d6B3dB().pack(_x.ObjNearestPtX, _x.ObjNearestPtY, _x.ObjNearestPtZ, _x.chks, _x.cntr, _x.dynamic_property, _x.snr, _x.rcs, _x.classification_confidence, _x.update_bit, _x.update_flag, _x.valid_flag, _x.speed, _x.accelerate, _x.vision_id, _x.CllsnMtgtnByBrkgPrimQly, _x.CllsnMtgtnByBrkgSecQly, _x.EmgyLaneKeepAidPosnQly, _x.CllsnWarnFwdQly, _x.fusion_source, _x.time_stamp, _x.lane_offset_right, _x.lane_offset_right_dev, _x.indicator_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 62
      (_x.HostSpeed, _x.HostYawRate, _x.StsBlkd0bin, _x.StsBlkdConf, _x.StsChks, _x.StsCntr, _x.StsDstbc, _x.StsEna, _x.StsFaulty, _x.StsIfVersMajor, _x.StsIfVersMinor, _x.StsLatency, _x.StsMisAlign, _x.StsMissCom, _x.StsRdrNrDetn, _x.StsRdrNrObj, _x.StsSftyFlt, _x.StsTiStamp, _x.StsWhlSpdCmpFac, _x.TiStampStsGlbTiBas, _x.TiStampStsSyncToGatewy, _x.TiStampStsTiLeap, _x.TiStampStsTiOut, _x.sensor_type, _x.Blockage, _x.Calibration, _x.Fault,) = _get_struct_3d8Bd5Bd9B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = data_parse.msg.Object()
        _x = val1
        start = end
        end += 21
        (_x.id, _x.life_cycles, _x.classification, _x.obstacle_probability, _x.probability_existence,) = _get_struct_HhB2d().unpack(str[start:end])
        _v11 = val1.center
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v12 = val1.center_uncertainty
        _x = _v12
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 28
        (_x.heading_angle, _x.heading_angle_uncertainty, _x.length, _x.width, _x.height,) = _get_struct_2d3f().unpack(str[start:end])
        _v13 = val1.relative_velocity
        _x = _v13
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v14 = val1.relative_velocity_uncertainty
        _x = _v14
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v15 = val1.relative_accelerate
        _x = _v15
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v16 = val1.relative_accelerate_uncertainty
        _x = _v16
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v17 = val1.absolute_velocity
        _x = _v17
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v18 = val1.absolute_velocity_uncertainty
        _x = _v18
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v19 = val1.absolute_accelerate
        _x = _v19
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v20 = val1.absolute_accelerate_uncertainty
        _x = _v20
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 94
        (_x.ObjNearestPtX, _x.ObjNearestPtY, _x.ObjNearestPtZ, _x.chks, _x.cntr, _x.dynamic_property, _x.snr, _x.rcs, _x.classification_confidence, _x.update_bit, _x.update_flag, _x.valid_flag, _x.speed, _x.accelerate, _x.vision_id, _x.CllsnMtgtnByBrkgPrimQly, _x.CllsnMtgtnByBrkgSecQly, _x.EmgyLaneKeepAidPosnQly, _x.CllsnWarnFwdQly, _x.fusion_source, _x.time_stamp, _x.lane_offset_right, _x.lane_offset_right_dev, _x.indicator_state,) = _get_struct_3d4B2d3B2d6B3dB().unpack(str[start:end])
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3d8Bd5Bd9B().pack(_x.HostSpeed, _x.HostYawRate, _x.StsBlkd0bin, _x.StsBlkdConf, _x.StsChks, _x.StsCntr, _x.StsDstbc, _x.StsEna, _x.StsFaulty, _x.StsIfVersMajor, _x.StsIfVersMinor, _x.StsLatency, _x.StsMisAlign, _x.StsMissCom, _x.StsRdrNrDetn, _x.StsRdrNrObj, _x.StsSftyFlt, _x.StsTiStamp, _x.StsWhlSpdCmpFac, _x.TiStampStsGlbTiBas, _x.TiStampStsSyncToGatewy, _x.TiStampStsTiLeap, _x.TiStampStsTiOut, _x.sensor_type, _x.Blockage, _x.Calibration, _x.Fault))
      length = len(self.objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.objects:
        _x = val1
        buff.write(_get_struct_HhB2d().pack(_x.id, _x.life_cycles, _x.classification, _x.obstacle_probability, _x.probability_existence))
        _v21 = val1.center
        _x = _v21
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v22 = val1.center_uncertainty
        _x = _v22
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_2d3f().pack(_x.heading_angle, _x.heading_angle_uncertainty, _x.length, _x.width, _x.height))
        _v23 = val1.relative_velocity
        _x = _v23
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v24 = val1.relative_velocity_uncertainty
        _x = _v24
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v25 = val1.relative_accelerate
        _x = _v25
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v26 = val1.relative_accelerate_uncertainty
        _x = _v26
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v27 = val1.absolute_velocity
        _x = _v27
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v28 = val1.absolute_velocity_uncertainty
        _x = _v28
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v29 = val1.absolute_accelerate
        _x = _v29
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v30 = val1.absolute_accelerate_uncertainty
        _x = _v30
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1
        buff.write(_get_struct_3d4B2d3B2d6B3dB().pack(_x.ObjNearestPtX, _x.ObjNearestPtY, _x.ObjNearestPtZ, _x.chks, _x.cntr, _x.dynamic_property, _x.snr, _x.rcs, _x.classification_confidence, _x.update_bit, _x.update_flag, _x.valid_flag, _x.speed, _x.accelerate, _x.vision_id, _x.CllsnMtgtnByBrkgPrimQly, _x.CllsnMtgtnByBrkgSecQly, _x.EmgyLaneKeepAidPosnQly, _x.CllsnWarnFwdQly, _x.fusion_source, _x.time_stamp, _x.lane_offset_right, _x.lane_offset_right_dev, _x.indicator_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.objects is None:
        self.objects = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 62
      (_x.HostSpeed, _x.HostYawRate, _x.StsBlkd0bin, _x.StsBlkdConf, _x.StsChks, _x.StsCntr, _x.StsDstbc, _x.StsEna, _x.StsFaulty, _x.StsIfVersMajor, _x.StsIfVersMinor, _x.StsLatency, _x.StsMisAlign, _x.StsMissCom, _x.StsRdrNrDetn, _x.StsRdrNrObj, _x.StsSftyFlt, _x.StsTiStamp, _x.StsWhlSpdCmpFac, _x.TiStampStsGlbTiBas, _x.TiStampStsSyncToGatewy, _x.TiStampStsTiLeap, _x.TiStampStsTiOut, _x.sensor_type, _x.Blockage, _x.Calibration, _x.Fault,) = _get_struct_3d8Bd5Bd9B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.objects = []
      for i in range(0, length):
        val1 = data_parse.msg.Object()
        _x = val1
        start = end
        end += 21
        (_x.id, _x.life_cycles, _x.classification, _x.obstacle_probability, _x.probability_existence,) = _get_struct_HhB2d().unpack(str[start:end])
        _v31 = val1.center
        _x = _v31
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v32 = val1.center_uncertainty
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 28
        (_x.heading_angle, _x.heading_angle_uncertainty, _x.length, _x.width, _x.height,) = _get_struct_2d3f().unpack(str[start:end])
        _v33 = val1.relative_velocity
        _x = _v33
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v34 = val1.relative_velocity_uncertainty
        _x = _v34
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v35 = val1.relative_accelerate
        _x = _v35
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v36 = val1.relative_accelerate_uncertainty
        _x = _v36
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v37 = val1.absolute_velocity
        _x = _v37
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v38 = val1.absolute_velocity_uncertainty
        _x = _v38
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v39 = val1.absolute_accelerate
        _x = _v39
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v40 = val1.absolute_accelerate_uncertainty
        _x = _v40
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _x = val1
        start = end
        end += 94
        (_x.ObjNearestPtX, _x.ObjNearestPtY, _x.ObjNearestPtZ, _x.chks, _x.cntr, _x.dynamic_property, _x.snr, _x.rcs, _x.classification_confidence, _x.update_bit, _x.update_flag, _x.valid_flag, _x.speed, _x.accelerate, _x.vision_id, _x.CllsnMtgtnByBrkgPrimQly, _x.CllsnMtgtnByBrkgSecQly, _x.EmgyLaneKeepAidPosnQly, _x.CllsnWarnFwdQly, _x.fusion_source, _x.time_stamp, _x.lane_offset_right, _x.lane_offset_right_dev, _x.indicator_state,) = _get_struct_3d4B2d3B2d6B3dB().unpack(str[start:end])
        self.objects.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2d3f = None
def _get_struct_2d3f():
    global _struct_2d3f
    if _struct_2d3f is None:
        _struct_2d3f = struct.Struct("<2d3f")
    return _struct_2d3f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3d4B2d3B2d6B3dB = None
def _get_struct_3d4B2d3B2d6B3dB():
    global _struct_3d4B2d3B2d6B3dB
    if _struct_3d4B2d3B2d6B3dB is None:
        _struct_3d4B2d3B2d6B3dB = struct.Struct("<3d4B2d3B2d6B3dB")
    return _struct_3d4B2d3B2d6B3dB
_struct_3d8Bd5Bd9B = None
def _get_struct_3d8Bd5Bd9B():
    global _struct_3d8Bd5Bd9B
    if _struct_3d8Bd5Bd9B is None:
        _struct_3d8Bd5Bd9B = struct.Struct("<3d8Bd5Bd9B")
    return _struct_3d8Bd5Bd9B
_struct_HhB2d = None
def _get_struct_HhB2d():
    global _struct_HhB2d
    if _struct_HhB2d is None:
        _struct_HhB2d = struct.Struct("<HhB2d")
    return _struct_HhB2d
