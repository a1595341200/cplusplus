# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from data_parse/AdjacentLane.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import data_parse.msg
import std_msgs.msg

class AdjacentLane(genpy.Message):
  _md5sum = "58e1312381e41b759ad9062603e465e3"
  _type = "data_parse/AdjacentLane"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

uint8 Lanes_Adjacent_Count
# enum
uint8 Adjacent_Type
uint8 UNDECIDED = 0
uint8 SOLID = 1
uint8 DASHED = 2
uint8 DLM = 3 
uint8 BOTTS = 4
uint8 DECELERATION = 5
uint8 HOV_LANE = 6

float64 Adjacent_Confidence
float64 Adjacent_View_Range_Start
float64 Adjacent_View_Range_End

# enum
uint8 Adjacent_Line_Role
uint8 NONE = 0
uint8 LEFT__LEFT_LANEMARK = 1
uint8 LEFT__RIGHT_LANEMARK = 2
uint8 RIGHT__LEFT_LANEMARK = 3
uint8 RIGHT__RIGHT_LANEMARK = 4

LHParam Adjacent_Line_C
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: data_parse/LHParam
float64 LH_C0
float64 LH_C1
float64 LH_C2
float64 LH_C3"""
  # Pseudo-constants
  UNDECIDED = 0
  SOLID = 1
  DASHED = 2
  DLM = 3
  BOTTS = 4
  DECELERATION = 5
  HOV_LANE = 6
  NONE = 0
  LEFT__LEFT_LANEMARK = 1
  LEFT__RIGHT_LANEMARK = 2
  RIGHT__LEFT_LANEMARK = 3
  RIGHT__RIGHT_LANEMARK = 4

  __slots__ = ['header','Lanes_Adjacent_Count','Adjacent_Type','Adjacent_Confidence','Adjacent_View_Range_Start','Adjacent_View_Range_End','Adjacent_Line_Role','Adjacent_Line_C']
  _slot_types = ['std_msgs/Header','uint8','uint8','float64','float64','float64','uint8','data_parse/LHParam']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Lanes_Adjacent_Count,Adjacent_Type,Adjacent_Confidence,Adjacent_View_Range_Start,Adjacent_View_Range_End,Adjacent_Line_Role,Adjacent_Line_C

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AdjacentLane, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Lanes_Adjacent_Count is None:
        self.Lanes_Adjacent_Count = 0
      if self.Adjacent_Type is None:
        self.Adjacent_Type = 0
      if self.Adjacent_Confidence is None:
        self.Adjacent_Confidence = 0.
      if self.Adjacent_View_Range_Start is None:
        self.Adjacent_View_Range_Start = 0.
      if self.Adjacent_View_Range_End is None:
        self.Adjacent_View_Range_End = 0.
      if self.Adjacent_Line_Role is None:
        self.Adjacent_Line_Role = 0
      if self.Adjacent_Line_C is None:
        self.Adjacent_Line_C = data_parse.msg.LHParam()
    else:
      self.header = std_msgs.msg.Header()
      self.Lanes_Adjacent_Count = 0
      self.Adjacent_Type = 0
      self.Adjacent_Confidence = 0.
      self.Adjacent_View_Range_Start = 0.
      self.Adjacent_View_Range_End = 0.
      self.Adjacent_Line_Role = 0
      self.Adjacent_Line_C = data_parse.msg.LHParam()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B3dB4d().pack(_x.Lanes_Adjacent_Count, _x.Adjacent_Type, _x.Adjacent_Confidence, _x.Adjacent_View_Range_Start, _x.Adjacent_View_Range_End, _x.Adjacent_Line_Role, _x.Adjacent_Line_C.LH_C0, _x.Adjacent_Line_C.LH_C1, _x.Adjacent_Line_C.LH_C2, _x.Adjacent_Line_C.LH_C3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Adjacent_Line_C is None:
        self.Adjacent_Line_C = data_parse.msg.LHParam()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 59
      (_x.Lanes_Adjacent_Count, _x.Adjacent_Type, _x.Adjacent_Confidence, _x.Adjacent_View_Range_Start, _x.Adjacent_View_Range_End, _x.Adjacent_Line_Role, _x.Adjacent_Line_C.LH_C0, _x.Adjacent_Line_C.LH_C1, _x.Adjacent_Line_C.LH_C2, _x.Adjacent_Line_C.LH_C3,) = _get_struct_2B3dB4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2B3dB4d().pack(_x.Lanes_Adjacent_Count, _x.Adjacent_Type, _x.Adjacent_Confidence, _x.Adjacent_View_Range_Start, _x.Adjacent_View_Range_End, _x.Adjacent_Line_Role, _x.Adjacent_Line_C.LH_C0, _x.Adjacent_Line_C.LH_C1, _x.Adjacent_Line_C.LH_C2, _x.Adjacent_Line_C.LH_C3))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Adjacent_Line_C is None:
        self.Adjacent_Line_C = data_parse.msg.LHParam()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 59
      (_x.Lanes_Adjacent_Count, _x.Adjacent_Type, _x.Adjacent_Confidence, _x.Adjacent_View_Range_Start, _x.Adjacent_View_Range_End, _x.Adjacent_Line_Role, _x.Adjacent_Line_C.LH_C0, _x.Adjacent_Line_C.LH_C1, _x.Adjacent_Line_C.LH_C2, _x.Adjacent_Line_C.LH_C3,) = _get_struct_2B3dB4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B3dB4d = None
def _get_struct_2B3dB4d():
    global _struct_2B3dB4d
    if _struct_2B3dB4d is None:
        _struct_2B3dB4d = struct.Struct("<2B3dB4d")
    return _struct_2B3dB4d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
