// Generated by gencpp from file data_parse/EgoLaneFrame.msg
// DO NOT EDIT!


#ifndef DATA_PARSE_MESSAGE_EGOLANEFRAME_H
#define DATA_PARSE_MESSAGE_EGOLANEFRAME_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <data_parse/EgoLane.h>

namespace data_parse
{
template <class ContainerAllocator>
struct EgoLaneFrame_
{
  typedef EgoLaneFrame_<ContainerAllocator> Type;

  EgoLaneFrame_()
    : header()
    , lanes()  {
    }
  EgoLaneFrame_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , lanes(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::data_parse::EgoLane_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::data_parse::EgoLane_<ContainerAllocator> >> _lanes_type;
  _lanes_type lanes;





  typedef boost::shared_ptr< ::data_parse::EgoLaneFrame_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::data_parse::EgoLaneFrame_<ContainerAllocator> const> ConstPtr;

}; // struct EgoLaneFrame_

typedef ::data_parse::EgoLaneFrame_<std::allocator<void> > EgoLaneFrame;

typedef boost::shared_ptr< ::data_parse::EgoLaneFrame > EgoLaneFramePtr;
typedef boost::shared_ptr< ::data_parse::EgoLaneFrame const> EgoLaneFrameConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::data_parse::EgoLaneFrame_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::data_parse::EgoLaneFrame_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::data_parse::EgoLaneFrame_<ContainerAllocator1> & lhs, const ::data_parse::EgoLaneFrame_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.lanes == rhs.lanes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::data_parse::EgoLaneFrame_<ContainerAllocator1> & lhs, const ::data_parse::EgoLaneFrame_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace data_parse

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::data_parse::EgoLaneFrame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_parse::EgoLaneFrame_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_parse::EgoLaneFrame_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_parse::EgoLaneFrame_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_parse::EgoLaneFrame_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_parse::EgoLaneFrame_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::data_parse::EgoLaneFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8128611ad76285e5f5d998a2253fa961";
  }

  static const char* value(const ::data_parse::EgoLaneFrame_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8128611ad76285e5ULL;
  static const uint64_t static_value2 = 0xf5d998a2253fa961ULL;
};

template<class ContainerAllocator>
struct DataType< ::data_parse::EgoLaneFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "data_parse/EgoLaneFrame";
  }

  static const char* value(const ::data_parse::EgoLaneFrame_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::data_parse::EgoLaneFrame_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"EgoLane[] lanes\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: data_parse/EgoLane\n"
"std_msgs/Header header\n"
"\n"
"bool Is_Construction_Area\n"
"\n"
"float64 LH_Confidence\n"
"\n"
"# enum\n"
"uint8 LH_Lanemark_Type \n"
"uint8 UNDECIDED = 0\n"
"uint8 SOLID = 1\n"
"uint8 DASHED = 2\n"
"uint8 DLM = 3 \n"
"uint8 BOTTS = 4\n"
"uint8 DECELERATION = 5\n"
"uint8 HOV_LANE = 6\n"
"\n"
"# enum\n"
"uint8 LH_Side\n"
"uint8 UNKNOWN = 0\n"
"uint8 LEFT = 1\n"
"uint8 RIGHT = 2\n"
"\n"
"float64 LH_VR_Start\n"
"float64 LH_VR_End\n"
"\n"
"LHParam LH_C\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: data_parse/LHParam\n"
"float64 LH_C0\n"
"float64 LH_C1\n"
"float64 LH_C2\n"
"float64 LH_C3\n"
;
  }

  static const char* value(const ::data_parse::EgoLaneFrame_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::data_parse::EgoLaneFrame_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.lanes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EgoLaneFrame_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::data_parse::EgoLaneFrame_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::data_parse::EgoLaneFrame_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "lanes[]" << std::endl;
    for (size_t i = 0; i < v.lanes.size(); ++i)
    {
      s << indent << "  lanes[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::data_parse::EgoLane_<ContainerAllocator> >::stream(s, indent + "    ", v.lanes[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATA_PARSE_MESSAGE_EGOLANEFRAME_H
