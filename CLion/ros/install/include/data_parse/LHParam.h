// Generated by gencpp from file data_parse/LHParam.msg
// DO NOT EDIT!


#ifndef DATA_PARSE_MESSAGE_LHPARAM_H
#define DATA_PARSE_MESSAGE_LHPARAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace data_parse
{
template <class ContainerAllocator>
struct LHParam_
{
  typedef LHParam_<ContainerAllocator> Type;

  LHParam_()
    : LH_C0(0.0)
    , LH_C1(0.0)
    , LH_C2(0.0)
    , LH_C3(0.0)  {
    }
  LHParam_(const ContainerAllocator& _alloc)
    : LH_C0(0.0)
    , LH_C1(0.0)
    , LH_C2(0.0)
    , LH_C3(0.0)  {
  (void)_alloc;
    }



   typedef double _LH_C0_type;
  _LH_C0_type LH_C0;

   typedef double _LH_C1_type;
  _LH_C1_type LH_C1;

   typedef double _LH_C2_type;
  _LH_C2_type LH_C2;

   typedef double _LH_C3_type;
  _LH_C3_type LH_C3;





  typedef boost::shared_ptr< ::data_parse::LHParam_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::data_parse::LHParam_<ContainerAllocator> const> ConstPtr;

}; // struct LHParam_

typedef ::data_parse::LHParam_<std::allocator<void> > LHParam;

typedef boost::shared_ptr< ::data_parse::LHParam > LHParamPtr;
typedef boost::shared_ptr< ::data_parse::LHParam const> LHParamConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::data_parse::LHParam_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::data_parse::LHParam_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::data_parse::LHParam_<ContainerAllocator1> & lhs, const ::data_parse::LHParam_<ContainerAllocator2> & rhs)
{
  return lhs.LH_C0 == rhs.LH_C0 &&
    lhs.LH_C1 == rhs.LH_C1 &&
    lhs.LH_C2 == rhs.LH_C2 &&
    lhs.LH_C3 == rhs.LH_C3;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::data_parse::LHParam_<ContainerAllocator1> & lhs, const ::data_parse::LHParam_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace data_parse

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::data_parse::LHParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_parse::LHParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_parse::LHParam_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_parse::LHParam_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_parse::LHParam_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_parse::LHParam_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::data_parse::LHParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e4226e7fb1ecf4c39595d9d3e9996560";
  }

  static const char* value(const ::data_parse::LHParam_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe4226e7fb1ecf4c3ULL;
  static const uint64_t static_value2 = 0x9595d9d3e9996560ULL;
};

template<class ContainerAllocator>
struct DataType< ::data_parse::LHParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "data_parse/LHParam";
  }

  static const char* value(const ::data_parse::LHParam_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::data_parse::LHParam_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 LH_C0\n"
"float64 LH_C1\n"
"float64 LH_C2\n"
"float64 LH_C3\n"
;
  }

  static const char* value(const ::data_parse::LHParam_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::data_parse::LHParam_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.LH_C0);
      stream.next(m.LH_C1);
      stream.next(m.LH_C2);
      stream.next(m.LH_C3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LHParam_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::data_parse::LHParam_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::data_parse::LHParam_<ContainerAllocator>& v)
  {
    s << indent << "LH_C0: ";
    Printer<double>::stream(s, indent + "  ", v.LH_C0);
    s << indent << "LH_C1: ";
    Printer<double>::stream(s, indent + "  ", v.LH_C1);
    s << indent << "LH_C2: ";
    Printer<double>::stream(s, indent + "  ", v.LH_C2);
    s << indent << "LH_C3: ";
    Printer<double>::stream(s, indent + "  ", v.LH_C3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATA_PARSE_MESSAGE_LHPARAM_H
