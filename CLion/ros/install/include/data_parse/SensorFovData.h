// Generated by gencpp from file data_parse/SensorFovData.msg
// DO NOT EDIT!


#ifndef DATA_PARSE_MESSAGE_SENSORFOVDATA_H
#define DATA_PARSE_MESSAGE_SENSORFOVDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace data_parse
{
template <class ContainerAllocator>
struct SensorFovData_
{
  typedef SensorFovData_<ContainerAllocator> Type;

  SensorFovData_()
    : device_id(0)
    , position()
    , opening_angle(0.0)
    , yaw_angle(0.0)
    , min_range(0.0)
    , max_range(0.0)  {
    }
  SensorFovData_(const ContainerAllocator& _alloc)
    : device_id(0)
    , position(_alloc)
    , opening_angle(0.0)
    , yaw_angle(0.0)
    , min_range(0.0)
    , max_range(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _device_id_type;
  _device_id_type device_id;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef float _opening_angle_type;
  _opening_angle_type opening_angle;

   typedef float _yaw_angle_type;
  _yaw_angle_type yaw_angle;

   typedef float _min_range_type;
  _min_range_type min_range;

   typedef float _max_range_type;
  _max_range_type max_range;





  typedef boost::shared_ptr< ::data_parse::SensorFovData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::data_parse::SensorFovData_<ContainerAllocator> const> ConstPtr;

}; // struct SensorFovData_

typedef ::data_parse::SensorFovData_<std::allocator<void> > SensorFovData;

typedef boost::shared_ptr< ::data_parse::SensorFovData > SensorFovDataPtr;
typedef boost::shared_ptr< ::data_parse::SensorFovData const> SensorFovDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::data_parse::SensorFovData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::data_parse::SensorFovData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::data_parse::SensorFovData_<ContainerAllocator1> & lhs, const ::data_parse::SensorFovData_<ContainerAllocator2> & rhs)
{
  return lhs.device_id == rhs.device_id &&
    lhs.position == rhs.position &&
    lhs.opening_angle == rhs.opening_angle &&
    lhs.yaw_angle == rhs.yaw_angle &&
    lhs.min_range == rhs.min_range &&
    lhs.max_range == rhs.max_range;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::data_parse::SensorFovData_<ContainerAllocator1> & lhs, const ::data_parse::SensorFovData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace data_parse

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::data_parse::SensorFovData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_parse::SensorFovData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_parse::SensorFovData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_parse::SensorFovData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_parse::SensorFovData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_parse::SensorFovData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::data_parse::SensorFovData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88971566923de10830fbfe5ef523b0e0";
  }

  static const char* value(const ::data_parse::SensorFovData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88971566923de108ULL;
  static const uint64_t static_value2 = 0x30fbfe5ef523b0e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::data_parse::SensorFovData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "data_parse/SensorFovData";
  }

  static const char* value(const ::data_parse::SensorFovData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::data_parse::SensorFovData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "################################################################################\n"
"#\n"
"# Sensor Fov Data\n"
"#\n"
"# Description:\n"
"#   Interface for describing the fov of a sensor, normally we use circle sector\n"
"#   to decribe the field of view of sensor data\n"
"#\n"
"#\n"
"#\n"
"################################################################################\n"
"\n"
"# device id\n"
"uint8 device_id\n"
"\n"
"# [m] the position based on the ego_rear_axis\n"
"geometry_msgs/Vector3 position\n"
"\n"
"# [rad] the opening angle of the sensor view\n"
"float32 opening_angle\n"
"\n"
"# [rad] the yaw angle of the sensor based on the x axis of ego_rear_axis\n"
"float32 yaw_angle\n"
"\n"
"# [m] minimum range of sensor detection in meter\n"
"# normally the close blind spot distance of this sensor\n"
"float32 min_range\n"
"\n"
"# [m] max range of sensor detection in meter\n"
"float32 max_range\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::data_parse::SensorFovData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::data_parse::SensorFovData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.device_id);
      stream.next(m.position);
      stream.next(m.opening_angle);
      stream.next(m.yaw_angle);
      stream.next(m.min_range);
      stream.next(m.max_range);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SensorFovData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::data_parse::SensorFovData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::data_parse::SensorFovData_<ContainerAllocator>& v)
  {
    s << indent << "device_id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.device_id);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "opening_angle: ";
    Printer<float>::stream(s, indent + "  ", v.opening_angle);
    s << indent << "yaw_angle: ";
    Printer<float>::stream(s, indent + "  ", v.yaw_angle);
    s << indent << "min_range: ";
    Printer<float>::stream(s, indent + "  ", v.min_range);
    s << indent << "max_range: ";
    Printer<float>::stream(s, indent + "  ", v.max_range);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATA_PARSE_MESSAGE_SENSORFOVDATA_H
