// Generated by gencpp from file data_parse/EgoMotion.msg
// DO NOT EDIT!


#ifndef DATA_PARSE_MESSAGE_EGOMOTION_H
#define DATA_PARSE_MESSAGE_EGOMOTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace data_parse
{
template <class ContainerAllocator>
struct EgoMotion_
{
  typedef EgoMotion_<ContainerAllocator> Type;

  EgoMotion_()
    : header()
    , is_valid(0)
    , speed(0.0)
    , yaw_rate(0.0)
    , accelerate(0.0)
    , age(0.0)
    , time_stamp(0.0)  {
    }
  EgoMotion_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , is_valid(0)
    , speed(0.0)
    , yaw_rate(0.0)
    , accelerate(0.0)
    , age(0.0)
    , time_stamp(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _is_valid_type;
  _is_valid_type is_valid;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _yaw_rate_type;
  _yaw_rate_type yaw_rate;

   typedef double _accelerate_type;
  _accelerate_type accelerate;

   typedef double _age_type;
  _age_type age;

   typedef double _time_stamp_type;
  _time_stamp_type time_stamp;





  typedef boost::shared_ptr< ::data_parse::EgoMotion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::data_parse::EgoMotion_<ContainerAllocator> const> ConstPtr;

}; // struct EgoMotion_

typedef ::data_parse::EgoMotion_<std::allocator<void> > EgoMotion;

typedef boost::shared_ptr< ::data_parse::EgoMotion > EgoMotionPtr;
typedef boost::shared_ptr< ::data_parse::EgoMotion const> EgoMotionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::data_parse::EgoMotion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::data_parse::EgoMotion_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::data_parse::EgoMotion_<ContainerAllocator1> & lhs, const ::data_parse::EgoMotion_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.is_valid == rhs.is_valid &&
    lhs.speed == rhs.speed &&
    lhs.yaw_rate == rhs.yaw_rate &&
    lhs.accelerate == rhs.accelerate &&
    lhs.age == rhs.age &&
    lhs.time_stamp == rhs.time_stamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::data_parse::EgoMotion_<ContainerAllocator1> & lhs, const ::data_parse::EgoMotion_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace data_parse

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::data_parse::EgoMotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::data_parse::EgoMotion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_parse::EgoMotion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::data_parse::EgoMotion_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_parse::EgoMotion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::data_parse::EgoMotion_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::data_parse::EgoMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3f42e9449b8ca7409bc79344fde2ba90";
  }

  static const char* value(const ::data_parse::EgoMotion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3f42e9449b8ca740ULL;
  static const uint64_t static_value2 = 0x9bc79344fde2ba90ULL;
};

template<class ContainerAllocator>
struct DataType< ::data_parse::EgoMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "data_parse/EgoMotion";
  }

  static const char* value(const ::data_parse::EgoMotion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::data_parse::EgoMotion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"uint8 is_valid\n"
"float64 speed\n"
"float64 yaw_rate\n"
"float64 accelerate\n"
"float64 age\n"
"float64 time_stamp\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::data_parse::EgoMotion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::data_parse::EgoMotion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.is_valid);
      stream.next(m.speed);
      stream.next(m.yaw_rate);
      stream.next(m.accelerate);
      stream.next(m.age);
      stream.next(m.time_stamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct EgoMotion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::data_parse::EgoMotion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::data_parse::EgoMotion_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "is_valid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_valid);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "yaw_rate: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_rate);
    s << indent << "accelerate: ";
    Printer<double>::stream(s, indent + "  ", v.accelerate);
    s << indent << "age: ";
    Printer<double>::stream(s, indent + "  ", v.age);
    s << indent << "time_stamp: ";
    Printer<double>::stream(s, indent + "  ", v.time_stamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DATA_PARSE_MESSAGE_EGOMOTION_H
