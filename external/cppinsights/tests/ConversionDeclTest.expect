namespace test
{
  template<class T = void>
  struct coroutine_handle
  {
    using retType_5_5 = coroutine_handle<void>;
    inline operator retType_5_5 ()
    {
      return {};
    }
    
  };
  
  /* First instantiated from: ConversionDeclTest.cpp:5 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  struct coroutine_handle<void>
  {
    using retType_5_5 = coroutine_handle<void>;
    inline operator retType_5_5 ();
    
  };
  
  #endif
  /* First instantiated from: ConversionDeclTest.cpp:11 */
  #ifdef INSIGHTS_USE_TEMPLATE
  template<>
  struct coroutine_handle<int>
  {
    using retType_5_5 = coroutine_handle<void>;
    inline operator retType_5_5 ()
    {
      return {};
    }
    
  };
  
  #endif
  
}

int main()
{
  test::coroutine_handle<int> a = {};
  test::coroutine_handle<void> b = static_cast<test::coroutine_handle<void>>(a.operator test::coroutine_handle<void>());
  return 0;
}



