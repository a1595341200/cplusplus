// Source: https://en.cppreference.com/w/cpp/language/structured_binding
#include <tuple>

float x = {};

char y = {};

int z = {};

 
std::tuple<float &, char &&, int> tpl = std::tuple<float &, char &&, int>(x, std::move(y), z);

const std::tuple<float &, char &&, int> & __tpl9 = tpl;
float & a = std::get<0UL>(__tpl9);
char & b = std::get<1UL>(__tpl9);
const int & c = std::get<2UL>(__tpl9);

// a names a structured binding that refers to x; decltype(a) is float&
// b names a structured binding that refers to y; decltype(b) is char&&
// c names a structured binding that refers to the 3rd element of tpl; decltype(c) is const int
